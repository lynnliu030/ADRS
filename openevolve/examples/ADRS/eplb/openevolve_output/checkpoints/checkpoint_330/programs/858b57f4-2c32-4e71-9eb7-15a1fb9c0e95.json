{"id": "858b57f4-2c32-4e71-9eb7-15a1fb9c0e95", "code": "# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\non how the EPLB algorithm works.\n\"\"\"\n\n# EVOLVE-BLOCK-START\n\nimport torch\n\n\ndef balanced_packing(weight: torch.Tensor,\n                     num_packs: int) -> tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Pack n weighted objects to m packs, such that each bin contains exactly\n    n/m objects and the weights of all packs are as balanced as possible.\n\n    Parameters:\n        weight: [X, n], the weight of each item\n        num_packs: number of packs\n\n    Returns:\n        pack_index: [X, n], the pack index of each item\n        rank_in_pack: [X, n], the rank of the item in the pack\n    \"\"\"\n    num_layers, num_groups = weight.shape\n    assert num_groups % num_packs == 0\n    groups_per_pack = num_groups // num_packs\n\n    if groups_per_pack == 1:\n        # Optimized: Directly assign pack_index and rank_in_pack for this simple case.\n        pack_index = torch.arange(num_groups,\n                                  dtype=torch.int64,\n                                  device=weight.device).expand(num_layers, num_groups)\n        rank_in_pack = torch.zeros_like(weight, dtype=torch.int64)\n        return pack_index, rank_in_pack\n\n    # Sort groups by weight in descending order.\n    # 'weight' is already float and on CPU from rebalance_experts.\n    sorted_weights, sorted_indices = weight.sort(-1, descending=True)\n\n    # Initialize pack_index and rank_in_pack.\n    pack_index = torch.empty_like(weight, dtype=torch.int64)\n    rank_in_pack = torch.empty_like(pack_index)\n    \n    # Initialize tensors to hold pack weights and item counts for all layers.\n    pack_weights_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=weight.dtype, device=weight.device)\n    pack_items_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=torch.int64, device=weight.device)\n\n    # Create row indices for advanced indexing, used repeatedly in the loop\n    row_indices = torch.arange(num_layers, device=weight.device)\n\n    # Iterate through sorted group ranks (k-th heaviest group for each layer)\n    # This loop replaces the outer Python loop over num_layers and inner heap operations,\n    # processing all layers simultaneously using vectorized PyTorch operations.\n    for k in range(num_groups):\n        # Get the k-th heaviest group's original ID and weight for each layer\n        current_group_weights_across_layers = sorted_weights[:, k] # [num_layers]\n        original_group_ids_across_layers = sorted_indices[:, k] # [num_layers]\n\n        # Identify full packs for each layer\n        mask_full_packs = (pack_items_per_layer == groups_per_pack)\n        \n        # Set weights of full packs to a very large number so they are not chosen by torch.min\n        temp_pack_weights_for_min = torch.where(mask_full_packs, \n                                                torch.full_like(pack_weights_per_layer, float('inf')), \n                                                pack_weights_per_layer)\n\n        # Find the pack with the minimum current weight for each layer\n        _, chosen_pack_ids_per_layer = torch.min(temp_pack_weights_for_min, dim=1) # [num_layers], [num_layers]\n\n        # Assign the group to the chosen pack using advanced indexing\n        pack_index[row_indices, original_group_ids_across_layers] = chosen_pack_ids_per_layer\n        rank_in_pack[row_indices, original_group_ids_across_layers] = pack_items_per_layer[row_indices, chosen_pack_ids_per_layer]\n\n        # Update pack weights and item counts for the chosen packs using advanced indexing\n        pack_weights_per_layer[row_indices, chosen_pack_ids_per_layer] += current_group_weights_across_layers\n        pack_items_per_layer[row_indices, chosen_pack_ids_per_layer] += 1\n        \n    return pack_index, rank_in_pack\n\n\n# Removed 'import heapq' as it is no longer used after vectorization.\n\ndef replicate_experts(\n        weight: torch.Tensor,\n        num_phy: int) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Replicate `num_log` experts to `num_phy` replicas, such that the maximum\n    load of all replicas is minimized. Optimized using a min-heap.\n\n    Parameters:\n        weight: [X, num_log]  (e.g., [num_layers * num_nodes, num_logical_experts_per_node])\n        num_phy: total number of experts after replication (e.g., num_physical_experts_per_node)\n\n    Returns:\n        phy2log: [X, num_phy], logical expert id of each physical expert\n        rank: [X, num_phy], the replica rank (0-indexed)\n        logcnt: [X, num_log], number of replicas for each logical expert\n    \"\"\"\n    n, num_log = weight.shape\n    # Ensure num_phy is at least num_log, as each logical expert should get at least one physical expert\n    assert num_phy >= num_log\n    device = weight.device\n\n    # Initialize output tensors\n    # phy2log: maps physical expert index to logical expert index\n    # rank: maps physical expert index to its replica rank (0-indexed)\n    phy2log = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    rank = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    \n    # Keep track of the current number of replicas for each logical expert\n    current_logcnt = torch.ones(n, num_log, dtype=torch.int64, device=device)\n    \n    # Initialize scores for each logical expert. Score = original_weight / current_replica_count.\n    # We want to greedily pick the expert with the highest score (most load per current replica) to replicate next.\n    current_scores = weight / current_logcnt.float()\n\n    # Create row indices for advanced indexing, used repeatedly in the loop\n    row_indices = torch.arange(n, device=device)\n\n    # Fill the physical experts by greedily picking the logical expert with the highest current score.\n    # This loop replaces the outer Python loop over 'n' and inner heap operations,\n    # processing all rows simultaneously using vectorized PyTorch operations.\n    for k in range(num_phy): # Iterate from 0 to num_phy-1 for physical expert index\n        # Find the logical expert with the highest current score for each row\n        # best_log_indices: [n] contains the index of the best logical expert for each row\n        _, best_log_indices = torch.max(current_scores, dim=1)\n        \n        # Assign this physical expert to the chosen logical expert for the current row.\n        phy2log[:, k] = best_log_indices\n        \n        # The rank is 0-indexed. It's the current count of replicas *before* incrementing.\n        rank[:, k] = current_logcnt[row_indices, best_log_indices] - 1 \n\n        # Increment the replica count for the chosen logical experts\n        current_logcnt[row_indices, best_log_indices] += 1\n        \n        # Update the scores for the chosen logical experts for the next iteration.\n        # The new score is original_weight / new_count.\n        original_weights_chosen = weight[row_indices, best_log_indices]\n        new_counts_chosen = current_logcnt[row_indices, best_log_indices]\n        current_scores[row_indices, best_log_indices] = original_weights_chosen / new_counts_chosen.float()\n\n    # The `current_logcnt` tensor now holds the final number of replicas for each logical expert.\n    return phy2log, rank, current_logcnt\n\n\ndef rebalance_experts_hierarchical(\n    weight: torch.Tensor,\n    num_physical_experts: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n):\n    \"\"\"\n    Parameters:\n        weight: [num_moe_layers, num_logical_experts]\n        num_physical_experts: number of physical experts after replication\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n        (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [num_moe_layers, num_physical_experts]\n        logical_to_physical_map: [num_moe_layers, num_logical_experts, X]\n        logical_count: [num_moe_layers, num_logical_experts]\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    assert num_logical_experts % num_groups == 0\n    group_size = num_logical_experts // num_groups\n    assert num_groups % num_nodes == 0\n    groups_per_node = num_groups // num_nodes\n    assert num_gpus % num_nodes == 0\n    assert num_physical_experts % num_gpus == 0\n    phy_experts_per_gpu = num_physical_experts // num_gpus\n\n    def inverse(perm: torch.Tensor) -> torch.Tensor:\n        inv = torch.empty_like(perm)\n        inv.scatter_(\n            1,\n            perm,\n            torch.arange(perm.size(1), dtype=torch.int64,\n                         device=perm.device).expand(perm.shape),\n        )\n        return inv\n\n    # Step 1: pack groups to nodes\n    tokens_per_group = weight.unflatten(-1, (num_groups, group_size)).sum(-1)\n    group_pack_index, group_rank_in_pack = balanced_packing(\n        tokens_per_group, num_nodes)\n    log2mlog = (((group_pack_index * groups_per_node + group_rank_in_pack) *\n                 group_size).unsqueeze(-1) +\n                torch.arange(group_size,\n                             dtype=torch.int64,\n                             device=group_pack_index.device)).flatten(-2)\n    mlog2log = inverse(log2mlog)\n\n    # Step 2: construct redundant experts within nodes\n    # [num_layers * num_nodes, num_logical_experts // num_nodes]\n    tokens_per_mlog = weight.gather(-1, mlog2log).view(\n        -1, num_logical_experts // num_nodes)\n    phy2mlog, phyrank, mlogcnt = replicate_experts(\n        tokens_per_mlog, num_physical_experts // num_nodes)\n\n    # Step 3: pack physical_experts to GPUs\n    # [num_layers * num_nodes, num_physical_experts // num_nodes]\n    tokens_per_phy = (tokens_per_mlog / mlogcnt).gather(-1, phy2mlog)\n    pack_index, rank_in_pack = balanced_packing(tokens_per_phy,\n                                                num_gpus // num_nodes)\n    phy2pphy = pack_index * phy_experts_per_gpu + rank_in_pack\n    pphy2phy = inverse(phy2pphy)\n\n    pphy2mlog = phy2mlog.gather(\n        -1, pphy2phy)  # [num_layers * num_nodes, num_log_per_nodes]\n    pphy2mlog = (pphy2mlog.view(num_layers, num_nodes, -1) + torch.arange(\n        0,\n        num_logical_experts,\n        num_logical_experts // num_nodes,\n        device=group_pack_index.device,\n    ).view(1, -1, 1)).flatten(-2)\n    pphy2log = mlog2log.gather(-1, pphy2mlog)\n    pphyrank = phyrank.gather(-1, pphy2phy).view(num_layers, -1)\n    logcnt = mlogcnt.view(num_layers, -1).gather(-1, log2mlog)\n    return pphy2log, pphyrank, logcnt\n\n\ndef rebalance_experts(\n    weight: torch.Tensor,\n    num_replicas: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Entry point for expert-parallelism load balancer.\n\n    Parameters:\n        weight: [layers, num_logical_experts], the load statistics for all\n            logical experts\n        num_replicas: number of physical experts, must be a multiple of\n            `num_gpus`\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n            (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [layers, num_replicas], the expert index of\n            each replica\n        logical_to_physical_map: [layers, num_logical_experts, X], the replica\n            indices for each expert\n        expert_count: [layers, num_logical_experts], number of physical\n            replicas for each logical expert\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    weight = weight.float().cpu()\n    if num_groups % num_nodes == 0:\n        # use hierarchical load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, num_groups, num_nodes, num_gpus)\n    else:\n        # use global load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, 1, 1, num_gpus)\n    # Fix: The `maxlogcnt` for `log2phy` must accommodate the maximum possible\n    # replica rank, which can be `num_replicas - 1`.\n    # Therefore, the third dimension of `log2phy` should be `num_replicas`.\n    max_log_replicas = num_replicas \n    log2phy: torch.Tensor = torch.full(\n        (num_layers, num_logical_experts, max_log_replicas),\n        -1,\n        dtype=torch.int64,\n        device=logcnt.device,\n    )\n    # The scatter_ operation needs a flat index.\n    # The index is logical_expert_id * max_log_replicas + phyrank.\n    # The maximum index will be (num_logical_experts - 1) * max_log_replicas + (max_log_replicas - 1)\n    # which equals num_logical_experts * max_log_replicas - 1.\n    # So the flattened size of log2phy must be num_logical_experts * max_log_replicas.\n    log2phy.view(num_layers, -1).scatter_(\n        -1,\n        phy2log * max_log_replicas + phyrank,\n        torch.arange(num_replicas, dtype=torch.int64,\n                     device=log2phy.device).expand(num_layers, -1),\n    )\n    return phy2log, log2phy, logcnt\n\n\n# EVOLVE-BLOCK-END\n\n__all__ = [\"rebalance_experts\"]\n\n", "language": "python", "parent_id": "43dd40f9-ce80-4627-b5d9-ce6f2e9860ca", "generation": 7, "timestamp": 1751054288.059184, "iteration_found": 71, "metrics": {"balancedness_score": 0.007070678491580371, "speed_score": 0.08026608588297647, "combined_score": 0.04366838218727842}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 153 lines with 140 lines", "parent_metrics": {"balancedness_score": 0.02438737774524382, "speed_score": 0.022048025541244024, "combined_score": 0.023217701643243924}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert programmer specializing in optimization algorithms. Your task is to improve the Mixture-of-Expert models Expert Parallelism Load Balancer (MoE EPLB) expert rearrangement algorithm.\nThis algorithm will take the load metrics recorded by the vLLM server, and rearrange the experts to balance the load. It can make replicas of some experts to achieve better load balancing.\nYour goal will be two-fold: 1. Improve the algorithm to achieve better load balancing; while 2. Improve the algorithm to be more efficient, i.e. reduce the execution time of the algorithm itself, since perfect load balancing is NP-hard.\nThe current algorithm is implemented in the `rebalance_experts` function. ", "user": "# Current Program Information\n- Current performance metrics: - balancedness_score: 0.0244\n- speed_score: 0.0220\n- combined_score: 0.0232\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: balancedness_score, speed_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: balancedness_score: 0.2983, speed_score: 0.0405, combined_score: 0.1694\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: balancedness_score: 0.2983, speed_score: 0.0722, combined_score: 0.1852\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: balancedness_score: 0.2983, speed_score: 0.0761, combined_score: 0.1872\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.1872)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\n# ... (truncated for brevity)\n```\nKey features: Performs well on balancedness_score (0.2983), Performs well on speed_score (0.0761), Performs well on combined_score (0.1872)\n\n\n### Program 2 (Score: 0.1852)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\n# ... (truncated for brevity)\n```\nKey features: Performs well on balancedness_score (0.2983), Performs well on speed_score (0.0722), Performs well on combined_score (0.1852)\n\n\n### Program 3 (Score: 0.1694)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\n# ... (truncated for brevity)\n```\nKey features: Performs well on balancedness_score (0.2983), Performs well on speed_score (0.0405), Performs well on combined_score (0.1694)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.1667)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n# ... (truncated)\n```\nKey features: Alternative approach to balancedness_score, Alternative approach to speed_score\n\n\n### Program D2 (Score: 0.1661)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n# ... (truncated)\n```\nKey features: Alternative approach to balancedness_score, Alternative approach to speed_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.1872, Type: Exploratory)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n# ... (truncated for brevity)\n```\nUnique approach: Alternative balancedness_score approach, Alternative speed_score approach, Alternative combined_score approach\n\n\n### Inspiration 2 (Score: 0.0939, Type: Exploratory)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n# ... (truncated for brevity)\n```\nUnique approach: Modification: Change 1: Replace 23 lines with 236 lines, Alternative balancedness_score approach, Alternative speed_score approach\n\n\n### Inspiration 3 (Score: 0.0000, Type: Exploratory)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n# ... (truncated for brevity)\n```\nUnique approach: Alternative balancedness_score approach, Alternative speed_score approach, Alternative combined_score approach\n\n\n### Inspiration 4 (Score: 0.0000, Type: Exploratory)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n# ... (truncated for brevity)\n```\nUnique approach: Modification: Change 1: Replace 42 lines with 57 lines, Alternative balancedness_score approach, Alternative speed_score approach\n\n\n### Inspiration 5 (Score: 0.1623, Type: Exploratory)\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n# ... (truncated for brevity)\n```\nUnique approach: Modification: Change 1: Replace 20 lines with 9 lines, Alternative balancedness_score approach, Alternative speed_score approach\n\n\n\n# Current Program\n```python\n# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\non how the EPLB algorithm works.\n\"\"\"\n\n# EVOLVE-BLOCK-START\n\nimport torch\n\n\ndef balanced_packing(weight: torch.Tensor,\n                     num_packs: int) -> tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Pack n weighted objects to m packs, such that each bin contains exactly\n    n/m objects and the weights of all packs are as balanced as possible.\n\n    Parameters:\n        weight: [X, n], the weight of each item\n        num_packs: number of packs\n\n    Returns:\n        pack_index: [X, n], the pack index of each item\n        rank_in_pack: [X, n], the rank of the item in the pack\n    \"\"\"\n    num_layers, num_groups = weight.shape\n    assert num_groups % num_packs == 0\n    groups_per_pack = num_groups // num_packs\n\n    if groups_per_pack == 1:\n        pack_index = torch.arange(weight.size(-1),\n                                  dtype=torch.int64,\n                                  device=weight.device).expand(weight.shape)\n        rank_in_pack = torch.zeros_like(weight, dtype=torch.int64)\n        return pack_index, rank_in_pack\n\n    # Sort groups by weight in descending order.\n    # 'weight' is already float and on CPU from rebalance_experts,\n    # so no need for .float().cpu() here.\n    indices = weight.sort(-1, descending=True).indices\n\n    # Initialize pack_index and rank_in_pack.\n    pack_index = torch.empty_like(weight, dtype=torch.int64)\n    rank_in_pack = torch.empty_like(pack_index)\n    \n    # Initialize tensors to hold pack weights and item counts for all layers.\n    pack_weights_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=weight.dtype, device=weight.device)\n    pack_items_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=torch.int64, device=weight.device)\n\n    # Iterate over each layer. The greedy assignment per layer is sequential.\n    for i in range(num_layers):\n        # Initialize a min-heap for the current layer's packs.\n        # Heap elements are (current_pack_weight, pack_id)\n        # All packs start with 0 weight.\n        current_layer_heap = [(0.0, p_idx) for p_idx in range(num_packs)]\n        heapq.heapify(current_layer_heap)\n\n        # For each layer, process groups in sorted order of their weights.\n        for group_id_tensor in indices[i]:\n            group_id = group_id_tensor.item() # Convert 0-dim tensor to scalar\n\n            # Pop the pack with the minimum current weight.\n            current_pack_weight_scalar, pack = heapq.heappop(current_layer_heap)\n\n            # Get current item count for this pack from the tensor.\n            current_pack_items_scalar = pack_items_per_layer[i, pack].item()\n\n            # Assign the group to the chosen pack.\n            pack_index[i, group_id] = pack\n            rank_in_pack[i, group_id] = current_pack_items_scalar\n\n            # Update pack weights and item counts for the chosen pack.\n            group_weight_scalar = weight[i, group_id].item()\n            new_pack_weight_scalar = current_pack_weight_scalar + group_weight_scalar\n\n            # Update the tensor values\n            pack_weights_per_layer[i, pack] = new_pack_weight_scalar\n            pack_items_per_layer[i, pack] += 1\n\n            # If the pack is not yet full, push it back to the heap.\n            if pack_items_per_layer[i, pack] < groups_per_pack:\n                heapq.heappush(current_layer_heap, (new_pack_weight_scalar, pack))\n    return pack_index, rank_in_pack\n\n\nimport heapq\n\ndef replicate_experts(\n        weight: torch.Tensor,\n        num_phy: int) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Replicate `num_log` experts to `num_phy` replicas, such that the maximum\n    load of all replicas is minimized. Optimized using a min-heap.\n\n    Parameters:\n        weight: [X, num_log]  (e.g., [num_layers * num_nodes, num_logical_experts_per_node])\n        num_phy: total number of experts after replication (e.g., num_physical_experts_per_node)\n\n    Returns:\n        phy2log: [X, num_phy], logical expert id of each physical expert\n        rank: [X, num_phy], the replica rank (0-indexed)\n        logcnt: [X, num_log], number of replicas for each logical expert\n    \"\"\"\n    n, num_log = weight.shape\n    num_redundant = num_phy - num_log\n    assert num_redundant >= 0\n    device = weight.device\n\n    # Initialize output tensors\n    # phy2log: maps physical expert index to logical expert index\n    # rank: maps physical expert index to its replica rank (0-indexed)\n    phy2log = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    rank = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    \n    # Keep track of the current number of replicas for each logical expert\n    # This is effectively the 'logcnt' output, but used internally for selection\n    current_logcnt = torch.ones(n, num_log, dtype=torch.int64, device=device)\n    \n    # Iterate over each of the 'n' independent scenarios/rows\n    for i in range(n):\n        # Initialize a min-heap for the current row.\n        # Heap elements are tuples: (-score_scalar, logical_expert_index, replica_rank)\n        min_heap_row = []\n        \n        # Populate the heap with the first replica's score for each logical expert in this row.\n        # The score represents the average load if this expert gets its k-th replica.\n        for j in range(num_log):\n            # Calculate score for the first replica (k=1) for the current row.\n            # Ensure division is float division and convert to scalar for heap.\n            score = weight[i, j] / 1.0 \n            heapq.heappush(min_heap_row, (-score.item(), j, 1)) # Push scalar score\n\n        # Fill the physical experts for the current row by greedily picking the best available replica.\n        for k in range(num_phy): # Iterate from 0 to num_phy-1 for physical expert index\n            if not min_heap_row: # Should not happen if num_phy >= num_log initially\n                break\n\n            # Get the logical expert with the highest score (most negative in heap) for the current row.\n            neg_score_scalar, best_log_idx, rank_val = heapq.heappop(min_heap_row)\n            \n            # Assign this physical expert to the chosen logical expert for the current row.\n            phy2log[i, k] = best_log_idx\n            # The rank is 0-indexed\n            rank[i, k] = rank_val - 1 \n\n            # Update the count of replicas for this logical expert in the current row.\n            current_logcnt[i, best_log_idx] = rank_val\n            \n            # If this logical expert can still receive more replicas,\n            # push its next replica's score to the heap for the current row.\n            # The maximum number of replicas for any logical expert is implicitly num_phy.\n            if rank_val < num_phy: # Check if there's room for another replica\n                # Ensure float division for the next score calculation and convert to scalar.\n                next_score = weight[i, best_log_idx] / (rank_val + 1.0)\n                heapq.heappush(min_heap_row, (-next_score.item(), best_log_idx, rank_val + 1))\n\n    # The `current_logcnt` tensor now holds the number of replicas for each logical expert.\n    # This is the `logcnt` output.\n    return phy2log, rank, current_logcnt\n\n\ndef rebalance_experts_hierarchical(\n    weight: torch.Tensor,\n    num_physical_experts: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n):\n    \"\"\"\n    Parameters:\n        weight: [num_moe_layers, num_logical_experts]\n        num_physical_experts: number of physical experts after replication\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n        (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [num_moe_layers, num_physical_experts]\n        logical_to_physical_map: [num_moe_layers, num_logical_experts, X]\n        logical_count: [num_moe_layers, num_logical_experts]\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    assert num_logical_experts % num_groups == 0\n    group_size = num_logical_experts // num_groups\n    assert num_groups % num_nodes == 0\n    groups_per_node = num_groups // num_nodes\n    assert num_gpus % num_nodes == 0\n    assert num_physical_experts % num_gpus == 0\n    phy_experts_per_gpu = num_physical_experts // num_gpus\n\n    def inverse(perm: torch.Tensor) -> torch.Tensor:\n        inv = torch.empty_like(perm)\n        inv.scatter_(\n            1,\n            perm,\n            torch.arange(perm.size(1), dtype=torch.int64,\n                         device=perm.device).expand(perm.shape),\n        )\n        return inv\n\n    # Step 1: pack groups to nodes\n    tokens_per_group = weight.unflatten(-1, (num_groups, group_size)).sum(-1)\n    group_pack_index, group_rank_in_pack = balanced_packing(\n        tokens_per_group, num_nodes)\n    log2mlog = (((group_pack_index * groups_per_node + group_rank_in_pack) *\n                 group_size).unsqueeze(-1) +\n                torch.arange(group_size,\n                             dtype=torch.int64,\n                             device=group_pack_index.device)).flatten(-2)\n    mlog2log = inverse(log2mlog)\n\n    # Step 2: construct redundant experts within nodes\n    # [num_layers * num_nodes, num_logical_experts // num_nodes]\n    tokens_per_mlog = weight.gather(-1, mlog2log).view(\n        -1, num_logical_experts // num_nodes)\n    phy2mlog, phyrank, mlogcnt = replicate_experts(\n        tokens_per_mlog, num_physical_experts // num_nodes)\n\n    # Step 3: pack physical_experts to GPUs\n    # [num_layers * num_nodes, num_physical_experts // num_nodes]\n    tokens_per_phy = (tokens_per_mlog / mlogcnt).gather(-1, phy2mlog)\n    pack_index, rank_in_pack = balanced_packing(tokens_per_phy,\n                                                num_gpus // num_nodes)\n    phy2pphy = pack_index * phy_experts_per_gpu + rank_in_pack\n    pphy2phy = inverse(phy2pphy)\n\n    pphy2mlog = phy2mlog.gather(\n        -1, pphy2phy)  # [num_layers * num_nodes, num_log_per_nodes]\n    pphy2mlog = (pphy2mlog.view(num_layers, num_nodes, -1) + torch.arange(\n        0,\n        num_logical_experts,\n        num_logical_experts // num_nodes,\n        device=group_pack_index.device,\n    ).view(1, -1, 1)).flatten(-2)\n    pphy2log = mlog2log.gather(-1, pphy2mlog)\n    pphyrank = phyrank.gather(-1, pphy2phy).view(num_layers, -1)\n    logcnt = mlogcnt.view(num_layers, -1).gather(-1, log2mlog)\n    return pphy2log, pphyrank, logcnt\n\n\ndef rebalance_experts(\n    weight: torch.Tensor,\n    num_replicas: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Entry point for expert-parallelism load balancer.\n\n    Parameters:\n        weight: [layers, num_logical_experts], the load statistics for all\n            logical experts\n        num_replicas: number of physical experts, must be a multiple of\n            `num_gpus`\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n            (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [layers, num_replicas], the expert index of\n            each replica\n        logical_to_physical_map: [layers, num_logical_experts, X], the replica\n            indices for each expert\n        expert_count: [layers, num_logical_experts], number of physical\n            replicas for each logical expert\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    weight = weight.float().cpu()\n    if num_groups % num_nodes == 0:\n        # use hierarchical load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, num_groups, num_nodes, num_gpus)\n    else:\n        # use global load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, 1, 1, num_gpus)\n    # Fix: The `maxlogcnt` for `log2phy` must accommodate the maximum possible\n    # replica rank, which can be `num_replicas - 1`.\n    # Therefore, the third dimension of `log2phy` should be `num_replicas`.\n    max_log_replicas = num_replicas \n    log2phy: torch.Tensor = torch.full(\n        (num_layers, num_logical_experts, max_log_replicas),\n        -1,\n        dtype=torch.int64,\n        device=logcnt.device,\n    )\n    # The scatter_ operation needs a flat index.\n    # The index is logical_expert_id * max_log_replicas + phyrank.\n    # The maximum index will be (num_logical_experts - 1) * max_log_replicas + (max_log_replicas - 1)\n    # which equals num_logical_experts * max_log_replicas - 1.\n    # So the flattened size of log2phy must be num_logical_experts * max_log_replicas.\n    log2phy.view(num_layers, -1).scatter_(\n        -1,\n        phy2log * max_log_replicas + phyrank,\n        torch.arange(num_replicas, dtype=torch.int64,\n                     device=log2phy.device).expand(num_layers, -1),\n    )\n    return phy2log, log2phy, logcnt\n\n\n# EVOLVE-BLOCK-END\n\n__all__ = [\"rebalance_experts\"]\n\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["The current program's performance metrics (balancedness_score: 0.0244, speed_score: 0.0220) are significantly lower than previous attempts, indicating a regression. The primary cause of this regression, especially for `speed_score`, is likely the extensive use of Python loops and `heapq` operations inside these loops within the `balanced_packing` and `replicate_experts` functions. These operations are performed per-layer or per-row, leading to high Python overhead, which is inefficient for large tensors compared to vectorized PyTorch operations.\n\nMy proposed improvements focus on two key areas:\n1.  **Vectorization of `balanced_packing`**: Replace the Python loop over `num_layers` and `heapq` operations with equivalent PyTorch tensor operations. The greedy \"assign to least loaded pack\" logic can be implemented using `torch.min` and advanced indexing, processing all layers simultaneously.\n2.  **Vectorization of `replicate_experts`**: Similarly, replace the Python loop over `n` (num_layers * num_nodes) and `heapq` operations with vectorized PyTorch operations. The greedy \"replicate the expert with the highest average load\" logic can be implemented using `torch.max` and advanced indexing.\n\nThese changes will drastically reduce Python overhead, leading to a significant improvement in `speed_score`. Since the underlying greedy algorithms are preserved, the `balancedness_score` should remain similar or potentially improve if there were any subtle numerical issues or inconsistencies introduced by the scalar Python operations in the original code.\n\nAdditionally, the `import heapq` statement becomes redundant after these changes and should be removed for cleaner code.\n\nHere are the specific changes in the required diff format:\n\n<<<<<<< SEARCH\nimport torch\n\n\ndef balanced_packing(weight: torch.Tensor,\n                     num_packs: int) -> tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Pack n weighted objects to m packs, such that each bin contains exactly\n    n/m objects and the weights of all packs are as balanced as possible.\n\n    Parameters:\n        weight: [X, n], the weight of each item\n        num_packs: number of packs\n\n    Returns:\n        pack_index: [X, n], the pack index of each item\n        rank_in_pack: [X, n], the rank of the item in the pack\n    \"\"\"\n    num_layers, num_groups = weight.shape\n    assert num_groups % num_packs == 0\n    groups_per_pack = num_groups // num_packs\n\n    if groups_per_pack == 1:\n        pack_index = torch.arange(weight.size(-1),\n                                  dtype=torch.int64,\n                                  device=weight.device).expand(weight.shape)\n        rank_in_pack = torch.zeros_like(weight, dtype=torch.int64)\n        return pack_index, rank_in_pack\n\n    # Sort groups by weight in descending order.\n    # 'weight' is already float and on CPU from rebalance_experts,\n    # so no need for .float().cpu() here.\n    indices = weight.sort(-1, descending=True).indices\n\n    # Initialize pack_index and rank_in_pack.\n    pack_index = torch.empty_like(weight, dtype=torch.int64)\n    rank_in_pack = torch.empty_like(pack_index)\n    \n    # Initialize tensors to hold pack weights and item counts for all layers.\n    pack_weights_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=weight.dtype, device=weight.device)\n    pack_items_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=torch.int64, device=weight.device)\n\n    # Iterate over each layer. The greedy assignment per layer is sequential.\n    for i in range(num_layers):\n        # Initialize a min-heap for the current layer's packs.\n        # Heap elements are (current_pack_weight, pack_id)\n        # All packs start with 0 weight.\n        current_layer_heap = [(0.0, p_idx) for p_idx in range(num_packs)]\n        heapq.heapify(current_layer_heap)\n\n        # For each layer, process groups in sorted order of their weights.\n        for group_id_tensor in indices[i]:\n            group_id = group_id_tensor.item() # Convert 0-dim tensor to scalar\n\n            # Pop the pack with the minimum current weight.\n            current_pack_weight_scalar, pack = heapq.heappop(current_layer_heap)\n\n            # Get current item count for this pack from the tensor.\n            current_pack_items_scalar = pack_items_per_layer[i, pack].item()\n\n            # Assign the group to the chosen pack.\n            pack_index[i, group_id] = pack\n            rank_in_pack[i, group_id] = current_pack_items_scalar\n\n            # Update pack weights and item counts for the chosen pack.\n            group_weight_scalar = weight[i, group_id].item()\n            new_pack_weight_scalar = current_pack_weight_scalar + group_weight_scalar\n\n            # Update the tensor values\n            pack_weights_per_layer[i, pack] = new_pack_weight_scalar\n            pack_items_per_layer[i, pack] += 1\n\n            # If the pack is not yet full, push it back to the heap.\n            if pack_items_per_layer[i, pack] < groups_per_pack:\n                heapq.heappush(current_layer_heap, (new_pack_weight_scalar, pack))\n    return pack_index, rank_in_pack\n\n\nimport heapq\n\ndef replicate_experts(\n        weight: torch.Tensor,\n        num_phy: int) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Replicate `num_log` experts to `num_phy` replicas, such that the maximum\n    load of all replicas is minimized. Optimized using a min-heap.\n\n    Parameters:\n        weight: [X, num_log]  (e.g., [num_layers * num_nodes, num_logical_experts_per_node])\n        num_phy: total number of experts after replication (e.g., num_physical_experts_per_node)\n\n    Returns:\n        phy2log: [X, num_phy], logical expert id of each physical expert\n        rank: [X, num_phy], the replica rank (0-indexed)\n        logcnt: [X, num_log], number of replicas for each logical expert\n    \"\"\"\n    n, num_log = weight.shape\n    num_redundant = num_phy - num_log\n    assert num_redundant >= 0\n    device = weight.device\n\n    # Initialize output tensors\n    # phy2log: maps physical expert index to logical expert index\n    # rank: maps physical expert index to its replica rank (0-indexed)\n    phy2log = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    rank = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    \n    # Keep track of the current number of replicas for each logical expert\n    # This is effectively the 'logcnt' output, but used internally for selection\n    current_logcnt = torch.ones(n, num_log, dtype=torch.int64, device=device)\n    \n    # Iterate over each of the 'n' independent scenarios/rows\n    for i in range(n):\n        # Initialize a min-heap for the current row.\n        # Heap elements are tuples: (-score_scalar, logical_expert_index, replica_rank)\n        min_heap_row = []\n        \n        # Populate the heap with the first replica's score for each logical expert in this row.\n        # The score represents the average load if this expert gets its k-th replica.\n        for j in range(num_log):\n            # Calculate score for the first replica (k=1) for the current row.\n            # Ensure division is float division and convert to scalar for heap.\n            score = weight[i, j] / 1.0 \n            heapq.heappush(min_heap_row, (-score.item(), j, 1)) # Push scalar score\n\n        # Fill the physical experts for the current row by greedily picking the best available replica.\n        for k in range(num_phy): # Iterate from 0 to num_phy-1 for physical expert index\n            if not min_heap_row: # Should not happen if num_phy >= num_log initially\n                break\n\n            # Get the logical expert with the highest score (most negative in heap) for the current row.\n            neg_score_scalar, best_log_idx, rank_val = heapq.heappop(min_heap_row)\n            \n            # Assign this physical expert to the chosen logical expert for the current row.\n            phy2log[i, k] = best_log_idx\n            # The rank is 0-indexed\n            rank[i, k] = rank_val - 1 \n\n            # Update the count of replicas for this logical expert in the current row.\n            current_logcnt[i, best_log_idx] = rank_val\n            \n            # If this logical expert can still receive more replicas,\n            # push its next replica's score to the heap for the current row.\n            # The maximum number of replicas for any logical expert is implicitly num_phy.\n            if rank_val < num_phy: # Check if there's room for another replica\n                # Ensure float division for the next score calculation and convert to scalar.\n                next_score = weight[i, best_log_idx] / (rank_val + 1.0)\n                heapq.heappush(min_heap_row, (-next_score.item(), best_log_idx, rank_val + 1))\n\n    # The `current_logcnt` tensor now holds the number of replicas for each logical expert.\n    # This is the `logcnt` output.\n    return phy2log, rank, current_logcnt\n=======\nimport torch\n\n\ndef balanced_packing(weight: torch.Tensor,\n                     num_packs: int) -> tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Pack n weighted objects to m packs, such that each bin contains exactly\n    n/m objects and the weights of all packs are as balanced as possible.\n\n    Parameters:\n        weight: [X, n], the weight of each item\n        num_packs: number of packs\n\n    Returns:\n        pack_index: [X, n], the pack index of each item\n        rank_in_pack: [X, n], the rank of the item in the pack\n    \"\"\"\n    num_layers, num_groups = weight.shape\n    assert num_groups % num_packs == 0\n    groups_per_pack = num_groups // num_packs\n\n    if groups_per_pack == 1:\n        # Optimized: Directly assign pack_index and rank_in_pack for this simple case.\n        pack_index = torch.arange(num_groups,\n                                  dtype=torch.int64,\n                                  device=weight.device).expand(num_layers, num_groups)\n        rank_in_pack = torch.zeros_like(weight, dtype=torch.int64)\n        return pack_index, rank_in_pack\n\n    # Sort groups by weight in descending order.\n    # 'weight' is already float and on CPU from rebalance_experts.\n    sorted_weights, sorted_indices = weight.sort(-1, descending=True)\n\n    # Initialize pack_index and rank_in_pack.\n    pack_index = torch.empty_like(weight, dtype=torch.int64)\n    rank_in_pack = torch.empty_like(pack_index)\n    \n    # Initialize tensors to hold pack weights and item counts for all layers.\n    pack_weights_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=weight.dtype, device=weight.device)\n    pack_items_per_layer = torch.zeros(\n        num_layers, num_packs, dtype=torch.int64, device=weight.device)\n\n    # Create row indices for advanced indexing, used repeatedly in the loop\n    row_indices = torch.arange(num_layers, device=weight.device)\n\n    # Iterate through sorted group ranks (k-th heaviest group for each layer)\n    # This loop replaces the outer Python loop over num_layers and inner heap operations,\n    # processing all layers simultaneously using vectorized PyTorch operations.\n    for k in range(num_groups):\n        # Get the k-th heaviest group's original ID and weight for each layer\n        current_group_weights_across_layers = sorted_weights[:, k] # [num_layers]\n        original_group_ids_across_layers = sorted_indices[:, k] # [num_layers]\n\n        # Identify full packs for each layer\n        mask_full_packs = (pack_items_per_layer == groups_per_pack)\n        \n        # Set weights of full packs to a very large number so they are not chosen by torch.min\n        temp_pack_weights_for_min = torch.where(mask_full_packs, \n                                                torch.full_like(pack_weights_per_layer, float('inf')), \n                                                pack_weights_per_layer)\n\n        # Find the pack with the minimum current weight for each layer\n        _, chosen_pack_ids_per_layer = torch.min(temp_pack_weights_for_min, dim=1) # [num_layers], [num_layers]\n\n        # Assign the group to the chosen pack using advanced indexing\n        pack_index[row_indices, original_group_ids_across_layers] = chosen_pack_ids_per_layer\n        rank_in_pack[row_indices, original_group_ids_across_layers] = pack_items_per_layer[row_indices, chosen_pack_ids_per_layer]\n\n        # Update pack weights and item counts for the chosen packs using advanced indexing\n        pack_weights_per_layer[row_indices, chosen_pack_ids_per_layer] += current_group_weights_across_layers\n        pack_items_per_layer[row_indices, chosen_pack_ids_per_layer] += 1\n        \n    return pack_index, rank_in_pack\n\n\n# Removed 'import heapq' as it is no longer used after vectorization.\n\ndef replicate_experts(\n        weight: torch.Tensor,\n        num_phy: int) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Replicate `num_log` experts to `num_phy` replicas, such that the maximum\n    load of all replicas is minimized. Optimized using a min-heap.\n\n    Parameters:\n        weight: [X, num_log]  (e.g., [num_layers * num_nodes, num_logical_experts_per_node])\n        num_phy: total number of experts after replication (e.g., num_physical_experts_per_node)\n\n    Returns:\n        phy2log: [X, num_phy], logical expert id of each physical expert\n        rank: [X, num_phy], the replica rank (0-indexed)\n        logcnt: [X, num_log], number of replicas for each logical expert\n    \"\"\"\n    n, num_log = weight.shape\n    # Ensure num_phy is at least num_log, as each logical expert should get at least one physical expert\n    assert num_phy >= num_log\n    device = weight.device\n\n    # Initialize output tensors\n    # phy2log: maps physical expert index to logical expert index\n    # rank: maps physical expert index to its replica rank (0-indexed)\n    phy2log = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    rank = torch.empty((n, num_phy), dtype=torch.int64, device=device)\n    \n    # Keep track of the current number of replicas for each logical expert\n    current_logcnt = torch.ones(n, num_log, dtype=torch.int64, device=device)\n    \n    # Initialize scores for each logical expert. Score = original_weight / current_replica_count.\n    # We want to greedily pick the expert with the highest score (most load per current replica) to replicate next.\n    current_scores = weight / current_logcnt.float()\n\n    # Create row indices for advanced indexing, used repeatedly in the loop\n    row_indices = torch.arange(n, device=device)\n\n    # Fill the physical experts by greedily picking the logical expert with the highest current score.\n    # This loop replaces the outer Python loop over 'n' and inner heap operations,\n    # processing all rows simultaneously using vectorized PyTorch operations.\n    for k in range(num_phy): # Iterate from 0 to num_phy-1 for physical expert index\n        # Find the logical expert with the highest current score for each row\n        # best_log_indices: [n] contains the index of the best logical expert for each row\n        _, best_log_indices = torch.max(current_scores, dim=1)\n        \n        # Assign this physical expert to the chosen logical expert for the current row.\n        phy2log[:, k] = best_log_indices\n        \n        # The rank is 0-indexed. It's the current count of replicas *before* incrementing.\n        rank[:, k] = current_logcnt[row_indices, best_log_indices] - 1 \n\n        # Increment the replica count for the chosen logical experts\n        current_logcnt[row_indices, best_log_indices] += 1\n        \n        # Update the scores for the chosen logical experts for the next iteration.\n        # The new score is original_weight / new_count.\n        original_weights_chosen = weight[row_indices, best_log_indices]\n        new_counts_chosen = current_logcnt[row_indices, best_log_indices]\n        current_scores[row_indices, best_log_indices] = original_weights_chosen / new_counts_chosen.float()\n\n    # The `current_logcnt` tensor now holds the final number of replicas for each logical expert.\n    return phy2log, rank, current_logcnt\n>>>>>>> REPLACE"]}}}