{"id": "af5a3c52-e427-4790-8554-75dae39e6537_migrant_4_migrant_0", "code": "# SPDX-License-Identifier: Apache-2.0\n\"\"\"\nExpert parallelism load balancer (EPLB) for vLLM.\n\nThis module implements the core rearrangement algorithm.\n\nThe rearrangement algorithm is adapted from\n[DeepSeek EPLB](https://github.com/deepseek-ai/eplb).\n\nPlease find at [#12](https://github.com/deepseek-ai/EPLB/issues/12) an example\non how the EPLB algorithm works.\n\"\"\"\n\n# EVOLVE-BLOCK-START\n\nimport torch\n\n\ndef balanced_packing(weight: torch.Tensor,\n                     num_packs: int) -> tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Pack n weighted objects to m packs, such that each bin contains exactly\n    n/m objects and the weights of all packs are as balanced as possible.\n\n    Parameters:\n        weight: [X, n], the weight of each item\n        num_packs: number of packs\n\n    Returns:\n        pack_index: [X, n], the pack index of each item\n        rank_in_pack: [X, n], the rank of the item in the pack\n    \"\"\"\n    num_layers, num_groups = weight.shape\n    assert num_groups % num_packs == 0\n    groups_per_pack = num_groups // num_packs\n\n    if groups_per_pack == 1:\n        pack_index = torch.arange(weight.size(-1),\n                                  dtype=torch.int64,\n                                  device=weight.device).expand(weight.shape)\n        rank_in_pack = torch.zeros_like(weight, dtype=torch.int64)\n        return pack_index, rank_in_pack\n\n    # Sort groups by weight in descending order.\n    # 'weight' is already float and on CPU from rebalance_experts,\n    # so no need for .float().cpu() here.\n    _, sorted_indices = weight.sort(-1, descending=True)\n\n    # Initialize pack_index and rank_in_pack.\n    pack_index = torch.empty_like(weight, dtype=torch.int64)\n    rank_in_pack = torch.empty_like(pack_index)\n    \n    # Generate the assignment pattern for items in sorted order (k = 0 to num_groups-1)\n    k_indices = torch.arange(num_groups, dtype=torch.int64, device=weight.device)\n\n    # Calculate rank_in_pack for the sorted items.\n    # The rank is based on how many items have already been assigned to a pack.\n    # Since each pack receives `groups_per_pack` items, and we are assigning\n    # items in sorted order, the `k`-th sorted item will get rank `k // num_packs`.\n    ranks_for_sorted_items = k_indices // num_packs\n\n    # Calculate pack_id for the sorted items using the \"snake\" pattern.\n    # This ensures that the heaviest items are distributed among packs,\n    # and subsequent items fill them in a way that keeps the sums balanced.\n    idx_in_block = k_indices % num_packs\n    block_num = k_indices // num_packs\n    is_even_block = (block_num % 2 == 0)\n    \n    packs_for_sorted_items = torch.where(\n        is_even_block,\n        idx_in_block,\n        num_packs - 1 - idx_in_block\n    )\n\n    # Expand the assignments to all layers\n    expanded_packs = packs_for_sorted_items.unsqueeze(0).expand(num_layers, -1)\n    expanded_ranks = ranks_for_sorted_items.unsqueeze(0).expand(num_layers, -1)\n\n    # Use scatter_ to populate the output tensors based on original group IDs.\n    # For each layer, `sorted_indices[i, k]` gives the original group ID\n    # for the item at sorted position `k`.\n    # We want to assign `expanded_packs[i, k]` to `pack_index[i, original_group_id]`\n    # And `expanded_ranks[i, k]` to `rank_in_pack[i, original_group_id]`\n    pack_index.scatter_(1, sorted_indices, expanded_packs)\n    rank_in_pack.scatter_(1, sorted_indices, expanded_ranks)\n\n    return pack_index, rank_in_pack\n\n\ndef replicate_experts(\n        weight: torch.Tensor,\n        num_phy: int) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Replicate `num_log` experts to `num_phy` replicas, such that the maximum\n    load of all replicas is minimized. Optimized using a greedy approach\n    with vectorized PyTorch operations.\n\n    Parameters:\n        weight: [X, num_log]  (e.g., [num_layers * num_nodes, num_logical_experts_per_node])\n        num_phy: total number of experts after replication (e.g., num_physical_experts_per_node)\n\n    Returns:\n        phy2log: [X, num_phy], logical expert id of each physical expert\n        rank: [X, num_phy], the replica rank (0-indexed)\n        logcnt: [X, num_log], number of replicas for each logical expert\n    \"\"\"\n    num_layers, num_log = weight.shape\n    assert num_phy >= num_log\n    device = weight.device\n\n    # Initialize output tensors\n    phy2log = torch.empty((num_layers, num_phy), dtype=torch.int64, device=device)\n    rank = torch.empty((num_layers, num_phy), dtype=torch.int64, device=device)\n    \n    # current_logcnt: tracks the number of replicas assigned to each logical expert.\n    # Initialized to 0, will be incremented as replicas are assigned.\n    current_logcnt = torch.zeros(num_layers, num_log, dtype=torch.int64, device=device)\n    \n    # current_replica_rank_to_assign: For each logical expert, this stores the next 0-indexed\n    # replica rank that will be assigned if this expert is chosen.\n    current_replica_rank_to_assign = torch.zeros(num_layers, num_log, dtype=torch.int64, device=device)\n\n    # next_avg_load_score: This tensor stores the 'score' for each logical expert.\n    # The score is `weight[i,j] / (current_logcnt[i,j] + 1.0)`.\n    # We want to pick the expert that, if it receives its next replica,\n    # would have the *highest* average load among all experts.\n    # This is equivalent to picking the expert that currently has the highest average load,\n    # and then assigning it a replica to reduce its load.\n    # A small epsilon is added to the denominator to prevent division by zero,\n    # especially if `weight` is 0 and `current_logcnt` is 0.\n    next_avg_load_score = weight.float() / (current_logcnt.float() + 1.0 + 1e-6)\n\n    # Iterate num_phy times to fill all physical expert slots.\n    # In each iteration, one physical expert slot is assigned for each layer.\n    for k_phy_idx in range(num_phy):\n        # For each layer, find the logical expert with the maximum `next_avg_load_score`.\n        # `max_scores` will be [num_layers], `best_log_indices` will be [num_layers].\n        max_scores, best_log_indices = torch.max(next_avg_load_score, dim=-1)\n\n        # Assign the selected logical expert and its rank to the current physical slot (`k_phy_idx`).\n        # `best_log_indices` contains the logical expert ID for each layer.\n        # `current_replica_rank_to_assign` (gathered using `best_log_indices`) provides the\n        # 0-indexed rank for that logical expert's current replica being assigned.\n        phy2log[:, k_phy_idx] = best_log_indices\n        rank[:, k_phy_idx] = current_replica_rank_to_assign.gather(\n            1, best_log_indices.unsqueeze(1)).squeeze(1)\n\n        # Prepare a 1-hot tensor to increment counts and ranks for the selected experts.\n        ones = torch.ones_like(best_log_indices, dtype=torch.int64, device=device)\n        \n        # Update `current_logcnt` for the selected experts (increment by 1).\n        current_logcnt.scatter_add_(1, best_log_indices.unsqueeze(1), ones.unsqueeze(1))\n        \n        # Update `current_replica_rank_to_assign` for the selected experts (increment by 1).\n        # This prepares the rank for the *next* replica assignment for these experts.\n        current_replica_rank_to_assign.scatter_add_(\n            1, best_log_indices.unsqueeze(1), ones.unsqueeze(1))\n        \n        # Calculate the new `next_avg_load_score` for the selected logical experts.\n        # This is `weight[i, selected_expert] / (new_current_logcnt[i, selected_expert] + 1.0)`.\n        # The `current_logcnt` for these experts has just been incremented.\n        \n        # Gather the weights of the selected experts.\n        selected_weights = weight.gather(1, best_log_indices.unsqueeze(1)).squeeze(1).float()\n        # Gather the new (incremented) counts for the selected experts.\n        updated_counts = current_logcnt.gather(1, best_log_indices.unsqueeze(1)).squeeze(1).float()\n        \n        # Calculate the new scores for these selected experts.\n        # This is the average load if they receive one more replica (i.e., (updated_counts + 1)).\n        new_scores = selected_weights / (updated_counts + 1.0 + 1e-6)\n        \n        # Scatter the new scores back into `next_avg_load_score`.\n        next_avg_load_score.scatter_(1, best_log_indices.unsqueeze(1), new_scores.unsqueeze(1))\n        \n    # The `current_logcnt` tensor now holds the final number of replicas for each logical expert.\n    return phy2log, rank, current_logcnt\n\n\ndef rebalance_experts_hierarchical(\n    weight: torch.Tensor,\n    num_physical_experts: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n):\n    \"\"\"\n    Parameters:\n        weight: [num_moe_layers, num_logical_experts]\n        num_physical_experts: number of physical experts after replication\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n        (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [num_moe_layers, num_physical_experts]\n        logical_to_physical_map: [num_moe_layers, num_logical_experts, X]\n        logical_count: [num_moe_layers, num_logical_experts]\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    assert num_logical_experts % num_groups == 0\n    group_size = num_logical_experts // num_groups\n    assert num_groups % num_nodes == 0\n    groups_per_node = num_groups // num_nodes\n    assert num_gpus % num_nodes == 0\n    assert num_physical_experts % num_gpus == 0\n    phy_experts_per_gpu = num_physical_experts // num_gpus\n\n    def inverse(perm: torch.Tensor) -> torch.Tensor:\n        inv = torch.empty_like(perm)\n        # More concise way to get values 0 to perm.size(1)-1 for scattering\n        values = torch.arange(perm.size(1), dtype=torch.int64, device=perm.device)\n        inv.scatter_(\n            1,\n            perm,\n            values.unsqueeze(0).expand_as(perm), # Expand values to match perm's shape\n        )\n        return inv\n\n    # Step 1: pack groups to nodes\n    tokens_per_group = weight.unflatten(-1, (num_groups, group_size)).sum(-1)\n    group_pack_index, group_rank_in_pack = balanced_packing(\n        tokens_per_group, num_nodes)\n    log2mlog = (((group_pack_index * groups_per_node + group_rank_in_pack) *\n                 group_size).unsqueeze(-1) +\n                torch.arange(group_size,\n                             dtype=torch.int64,\n                             device=group_pack_index.device)).flatten(-2)\n    mlog2log = inverse(log2mlog)\n\n    # Step 2: construct redundant experts within nodes\n    # [num_layers * num_nodes, num_logical_experts // num_nodes]\n    tokens_per_mlog = weight.gather(-1, mlog2log).view(\n        -1, num_logical_experts // num_nodes)\n    phy2mlog, phyrank, mlogcnt = replicate_experts(\n        tokens_per_mlog, num_physical_experts // num_nodes)\n\n    # Step 3: pack physical_experts to GPUs\n    # [num_layers * num_nodes, num_physical_experts // num_nodes]\n    tokens_per_phy = (tokens_per_mlog / mlogcnt).gather(-1, phy2mlog)\n    pack_index, rank_in_pack = balanced_packing(tokens_per_phy,\n                                                num_gpus // num_nodes)\n    phy2pphy = pack_index * phy_experts_per_gpu + rank_in_pack\n    pphy2phy = inverse(phy2pphy)\n\n    pphy2mlog = phy2mlog.gather(\n        -1, pphy2phy)  # [num_layers * num_nodes, num_log_per_nodes]\n    pphy2mlog = (pphy2mlog.view(num_layers, num_nodes, -1) + torch.arange(\n        0,\n        num_logical_experts,\n        num_logical_experts // num_nodes,\n        device=group_pack_index.device,\n    ).view(1, -1, 1)).flatten(-2)\n    pphy2log = mlog2log.gather(-1, pphy2mlog)\n    pphyrank = phyrank.gather(-1, pphy2phy).view(num_layers, -1)\n    logcnt = mlogcnt.view(num_layers, -1).gather(-1, log2mlog)\n    return pphy2log, pphyrank, logcnt\n\n\ndef rebalance_experts(\n    weight: torch.Tensor,\n    num_replicas: int,\n    num_groups: int,\n    num_nodes: int,\n    num_gpus: int,\n) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Entry point for expert-parallelism load balancer.\n\n    Parameters:\n        weight: [layers, num_logical_experts], the load statistics for all\n            logical experts\n        num_replicas: number of physical experts, must be a multiple of\n            `num_gpus`\n        num_groups: number of expert groups\n        num_nodes: number of server nodes, where the intra-node network\n            (e.g, NVLink) is faster\n        num_gpus: number of GPUs, must be a multiple of `num_nodes`\n\n    Returns:\n        physical_to_logical_map: [layers, num_replicas], the expert index of\n            each replica\n        logical_to_physical_map: [layers, num_logical_experts, X], the replica\n            indices for each expert\n        expert_count: [layers, num_logical_experts], number of physical\n            replicas for each logical expert\n    \"\"\"\n    num_layers, num_logical_experts = weight.shape\n    weight = weight.float() # Keep on original device (likely GPU)\n    if num_groups % num_nodes == 0:\n        # use hierarchical load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, num_groups, num_nodes, num_gpus)\n    else:\n        # use global load-balance policy\n        phy2log, phyrank, logcnt = rebalance_experts_hierarchical(\n            weight, num_replicas, 1, 1, num_gpus)\n    # Fix: The `maxlogcnt` for `log2phy` must accommodate the maximum possible\n    # replica rank, which can be `num_replicas - 1`.\n    # Therefore, the third dimension of `log2phy` should be `num_replicas`.\n    max_log_replicas = num_replicas \n    log2phy: torch.Tensor = torch.full(\n        (num_layers, num_logical_experts, max_log_replicas),\n        -1,\n        dtype=torch.int64,\n        device=logcnt.device,\n    )\n    # The scatter_ operation needs a flat index.\n    # The index is logical_expert_id * max_log_replicas + phyrank.\n    # The maximum index will be (num_logical_experts - 1) * max_log_replicas + (max_log_replicas - 1)\n    # which equals num_logical_experts * max_log_replicas - 1.\n    # So the flattened size of log2phy must be num_logical_experts * max_log_replicas.\n    log2phy.view(num_layers, -1).scatter_(\n        -1,\n        phy2log * max_log_replicas + phyrank,\n        torch.arange(num_replicas, dtype=torch.int64,\n                     device=log2phy.device).expand(num_layers, -1),\n    )\n    return phy2log, log2phy, logcnt\n\n\n# EVOLVE-BLOCK-END\n\n__all__ = [\"rebalance_experts\"]\n\n", "language": "python", "parent_id": "af5a3c52-e427-4790-8554-75dae39e6537_migrant_4", "generation": 9, "timestamp": 1751063252.621275, "iteration_found": 0, "metrics": {"balancedness_score": 0.3527582622846887, "speed_score": 0.11032604792186239, "combined_score": 0.23154215510327555}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 32 lines with 32 lines", "parent_metrics": {"balancedness_score": 0.3527582622846887, "speed_score": 0.10966503049060114, "combined_score": 0.2312116463876449}, "island": 0, "migrant": true}, "artifacts_json": null, "artifact_dir": null}